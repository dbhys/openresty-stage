# Configuration File - Nginx Server Configs
# This is a read-only file, do not try to modify it.

master_process on;

worker_processes auto;
worker_cpu_affinity auto;

# main configuration snippet starts


# main configuration snippet ends

error_log logs/error.log info;
pid logs/nginx.pid;

worker_rlimit_nofile 20480;

events {
    accept_mutex off;
    worker_connections 10620;
}

worker_rlimit_core  16G;

worker_shutdown_timeout 240s;

env SERVER_HOST;
env SERVER_PORT;

http {
    resolver 192.168.65.1;
    resolver_timeout 5;
    # put extra_lua_path in front of the builtin path
    # so user can override the source code
    lua_package_path  "${prefix}deps/share/?.lua;$prefixdeps/share/?/init.lua;${prefix}?.lua;$prefix?/init.lua;./?.lua;;";
    lua_package_cpath "${prefix}deps/lib/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/openresty/luajit/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so;";

    lua_code_cache on;

    # for openid-connect plugin
    lua_shared_dict jwks                  1m; # cache for JWKs
    lua_shared_dict introspection        10m; # cache for JWT verification results

    # for authz-keycloak
    lua_shared_dict access_tokens         1m; # cache for service account access tokens

    # for custom shared dict

    # for proxy cache
    proxy_cache_path /tmp/disk_cache_one levels=1:2 keys_zone=disk_cache_one:50m inactive=1d max_size=1G use_temp_path=off;

    # for proxy cache
    map $upstream_cache_zone $upstream_cache_zone_info {
        disk_cache_one /tmp/disk_cache_one,1:2;
    }


    lua_ssl_verify_depth 5;
    ssl_session_timeout 86400;

    underscores_in_headers on;

    lua_socket_log_errors off;

    lua_http10_buffering off;

    lua_regex_match_limit 100000;
    lua_regex_cache_max_entries 8192;

    log_format main escape=default '$remote_addr - $remote_user [$time_local] $http_host "$request" $status $body_bytes_sent $request_time "$http_referer" "$http_user_agent" $upstream_addr $upstream_status $upstream_response_time "$upstream_scheme://$upstream_host$upstream_uri"';
    uninitialized_variable_warn off;

    access_log logs/access.log main buffer=16384 flush=3;
    open_file_cache  max=1000 inactive=60;
    client_max_body_size 0;
    keepalive_timeout 60s;
    client_header_timeout 60s;
    client_body_timeout 60s;
    send_timeout 10s;

    server_tokens off;

    include /usr/local/openresty/nginx/conf/mime.types;
    charset utf-8;

    # error_page
    error_page 500 @50x.html;

    real_ip_header X-Real-IP;

    set_real_ip_from 127.0.0.1;
    set_real_ip_from unix:;

    # http configuration snippet starts


    # http configuration snippet ends

    upstream default_upstream {
        server 0.0.0.1;
        balancer_by_lua_block {
            local balancer          = require "ngx.balancer"
            ngx.log(ngx.INFO, "balancer peer: " .. os.getenv("SERVER_HOST") .. " , " .. os.getenv("SERVER_PORT"))
            balancer.set_current_peer(os.getenv("SERVER_HOST"), os.getenv("SERVER_PORT"))
        }

        keepalive 320;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }


    init_by_lua_block {
        ngx.log(ngx.INFO, package.path)
        require "resty.core"
    }

    server {
        listen 80 default_server reuseport;
        #listen 443 ssl default_server http2 reuseport;

        listen [::]:80 default_server reuseport;
        #listen [::]:443 ssl default_server http2 reuseport;

        server_name _;


        #ssl_certificate      cert/ssl_PLACE_HOLDER.crt;
        #ssl_certificate_key  cert/ssl_PLACE_HOLDER.key;
        #ssl_session_cache    shared:SSL:20m;
        #ssl_session_timeout 10m;

        #ssl_protocols TLSv1.2 TLSv1.3;
        #ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        #ssl_prefer_server_ciphers on;
        #ssl_session_tickets off;

        # http server configuration snippet starts


        # http server configuration snippet ends

        location = /nginx_status {
            access_log off;
            stub_status;
        }

        proxy_ssl_name $upstream_host;
        proxy_ssl_server_name on;

        location / {
            set $upstream_mirror_host        '';
            set $upstream_upgrade            '';
            set $upstream_connection         '';

            set $upstream_scheme             'http';
            set $upstream_host               $http_host;
            set $upstream_uri                '';
            set $ctx_ref                     '';
            set $from_error_page             '';


            access_by_lua_block {
                -- ngx.log(ngx.INFO, os.)
                ngx.log(ngx.INFO, "Server info: HOST: " .. os.getenv("SERVER_HOST") .. ", PORT: " .. os.getenv("SERVER_PORT"))
            }

            proxy_http_version 1.1;
            proxy_set_header   Host              $upstream_host;
            proxy_set_header   Upgrade           $upstream_upgrade;
            proxy_set_header   Connection        $upstream_connection;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_pass_header  Date;

            ### the following x-forwarded-* headers is to send to upstream server

            set $var_x_forwarded_for        $remote_addr;
            set $var_x_forwarded_proto      $scheme;
            set $var_x_forwarded_host       $host;
            set $var_x_forwarded_port       $server_port;

            if ($http_x_forwarded_for != "") {
                set $var_x_forwarded_for "${http_x_forwarded_for}, ${realip_remote_addr}";
            }
            if ($http_x_forwarded_host != "") {
                set $var_x_forwarded_host $http_x_forwarded_host;
            }
            if ($http_x_forwarded_port != "") {
                set $var_x_forwarded_port $http_x_forwarded_port;
            }

            proxy_set_header   X-Forwarded-For      $var_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto    $var_x_forwarded_proto;
            proxy_set_header   X-Forwarded-Host     $var_x_forwarded_host;
            proxy_set_header   X-Forwarded-Port     $var_x_forwarded_port;

            ###  the following configuration is to cache response content from upstream server

            set $upstream_cache_zone            off;
            set $upstream_cache_key             '';
            set $upstream_cache_bypass          '';
            set $upstream_no_cache              '';

            proxy_cache                         $upstream_cache_zone;
            proxy_cache_valid                   any 10s;
            proxy_cache_min_uses                1;
            proxy_cache_methods                 GET HEAD;
            proxy_cache_lock_timeout            5s;
            proxy_cache_use_stale               off;
            proxy_cache_key                     $upstream_cache_key;
            proxy_no_cache                      $upstream_no_cache;
            proxy_cache_bypass                  $upstream_cache_bypass;


            proxy_pass      $upstream_scheme://default_upstream$upstream_uri;


            header_filter_by_lua_block {
                -- piot.http_header_filter_phase()
            }

            body_filter_by_lua_block {
                -- piot.http_body_filter_phase()
            }

            log_by_lua_block {
                -- piot.http_log_phase()
            }
        }
    }
}